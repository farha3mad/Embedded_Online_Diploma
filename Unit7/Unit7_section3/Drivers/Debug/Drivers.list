
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e18  08000e18  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000e18  08000e18  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e18  08000e18  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e18  08000e18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000e40  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000e40  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039fe  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000968  00000000  00000000  00023a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006c4  00000000  00000000  000243af  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000158  00000000  00000000  00024a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00024bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002933  00000000  00000000  00024cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002633  00000000  00000000  00027603  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008d2a  00000000  00000000  00029c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00032960  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003b0  00000000  00000000  000329dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dd0 	.word	0x08000dd0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000dd0 	.word	0x08000dd0

08000170 <keypad_init>:
GPIO_Pin_Config_t pincg;

int keypad_rows[] = {R0,R1,R2,R3};
int keypad_columns[] = {C0,C1,C2,C3};

void keypad_init(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	//configure keypad pins output mode

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000174:	4b3f      	ldr	r3, [pc, #252]	; (8000274 <keypad_init+0x104>)
 8000176:	2204      	movs	r2, #4
 8000178:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = keypad_rows[0];
 800017a:	4b3f      	ldr	r3, [pc, #252]	; (8000278 <keypad_init+0x108>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	b29a      	uxth	r2, r3
 8000180:	4b3c      	ldr	r3, [pc, #240]	; (8000274 <keypad_init+0x104>)
 8000182:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000184:	4b3b      	ldr	r3, [pc, #236]	; (8000274 <keypad_init+0x104>)
 8000186:	2201      	movs	r2, #1
 8000188:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(KEYPAD_PORT, &pincg);
 800018a:	493a      	ldr	r1, [pc, #232]	; (8000274 <keypad_init+0x104>)
 800018c:	483b      	ldr	r0, [pc, #236]	; (800027c <keypad_init+0x10c>)
 800018e:	f000 fc1a 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000192:	4b38      	ldr	r3, [pc, #224]	; (8000274 <keypad_init+0x104>)
 8000194:	2204      	movs	r2, #4
 8000196:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = keypad_rows[1];
 8000198:	4b37      	ldr	r3, [pc, #220]	; (8000278 <keypad_init+0x108>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	b29a      	uxth	r2, r3
 800019e:	4b35      	ldr	r3, [pc, #212]	; (8000274 <keypad_init+0x104>)
 80001a0:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80001a2:	4b34      	ldr	r3, [pc, #208]	; (8000274 <keypad_init+0x104>)
 80001a4:	2201      	movs	r2, #1
 80001a6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(KEYPAD_PORT, &pincg);
 80001a8:	4932      	ldr	r1, [pc, #200]	; (8000274 <keypad_init+0x104>)
 80001aa:	4834      	ldr	r0, [pc, #208]	; (800027c <keypad_init+0x10c>)
 80001ac:	f000 fc0b 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80001b0:	4b30      	ldr	r3, [pc, #192]	; (8000274 <keypad_init+0x104>)
 80001b2:	2204      	movs	r2, #4
 80001b4:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = keypad_rows[2];
 80001b6:	4b30      	ldr	r3, [pc, #192]	; (8000278 <keypad_init+0x108>)
 80001b8:	689b      	ldr	r3, [r3, #8]
 80001ba:	b29a      	uxth	r2, r3
 80001bc:	4b2d      	ldr	r3, [pc, #180]	; (8000274 <keypad_init+0x104>)
 80001be:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80001c0:	4b2c      	ldr	r3, [pc, #176]	; (8000274 <keypad_init+0x104>)
 80001c2:	2201      	movs	r2, #1
 80001c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(KEYPAD_PORT, &pincg);
 80001c6:	492b      	ldr	r1, [pc, #172]	; (8000274 <keypad_init+0x104>)
 80001c8:	482c      	ldr	r0, [pc, #176]	; (800027c <keypad_init+0x10c>)
 80001ca:	f000 fbfc 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80001ce:	4b29      	ldr	r3, [pc, #164]	; (8000274 <keypad_init+0x104>)
 80001d0:	2204      	movs	r2, #4
 80001d2:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = keypad_rows[3];
 80001d4:	4b28      	ldr	r3, [pc, #160]	; (8000278 <keypad_init+0x108>)
 80001d6:	68db      	ldr	r3, [r3, #12]
 80001d8:	b29a      	uxth	r2, r3
 80001da:	4b26      	ldr	r3, [pc, #152]	; (8000274 <keypad_init+0x104>)
 80001dc:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80001de:	4b25      	ldr	r3, [pc, #148]	; (8000274 <keypad_init+0x104>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(KEYPAD_PORT, &pincg);
 80001e4:	4923      	ldr	r1, [pc, #140]	; (8000274 <keypad_init+0x104>)
 80001e6:	4825      	ldr	r0, [pc, #148]	; (800027c <keypad_init+0x10c>)
 80001e8:	f000 fbed 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80001ec:	4b21      	ldr	r3, [pc, #132]	; (8000274 <keypad_init+0x104>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = keypad_columns[0];
 80001f2:	4b23      	ldr	r3, [pc, #140]	; (8000280 <keypad_init+0x110>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	4b1e      	ldr	r3, [pc, #120]	; (8000274 <keypad_init+0x104>)
 80001fa:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80001fc:	4b1d      	ldr	r3, [pc, #116]	; (8000274 <keypad_init+0x104>)
 80001fe:	2201      	movs	r2, #1
 8000200:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(KEYPAD_PORT, &pincg);
 8000202:	491c      	ldr	r1, [pc, #112]	; (8000274 <keypad_init+0x104>)
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <keypad_init+0x10c>)
 8000206:	f000 fbde 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 800020a:	4b1a      	ldr	r3, [pc, #104]	; (8000274 <keypad_init+0x104>)
 800020c:	2204      	movs	r2, #4
 800020e:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = keypad_columns[1];
 8000210:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <keypad_init+0x110>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	b29a      	uxth	r2, r3
 8000216:	4b17      	ldr	r3, [pc, #92]	; (8000274 <keypad_init+0x104>)
 8000218:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800021a:	4b16      	ldr	r3, [pc, #88]	; (8000274 <keypad_init+0x104>)
 800021c:	2201      	movs	r2, #1
 800021e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(KEYPAD_PORT, &pincg);
 8000220:	4914      	ldr	r1, [pc, #80]	; (8000274 <keypad_init+0x104>)
 8000222:	4816      	ldr	r0, [pc, #88]	; (800027c <keypad_init+0x10c>)
 8000224:	f000 fbcf 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <keypad_init+0x104>)
 800022a:	2204      	movs	r2, #4
 800022c:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = keypad_columns[2];
 800022e:	4b14      	ldr	r3, [pc, #80]	; (8000280 <keypad_init+0x110>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	b29a      	uxth	r2, r3
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <keypad_init+0x104>)
 8000236:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <keypad_init+0x104>)
 800023a:	2201      	movs	r2, #1
 800023c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(KEYPAD_PORT, &pincg);
 800023e:	490d      	ldr	r1, [pc, #52]	; (8000274 <keypad_init+0x104>)
 8000240:	480e      	ldr	r0, [pc, #56]	; (800027c <keypad_init+0x10c>)
 8000242:	f000 fbc0 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <keypad_init+0x104>)
 8000248:	2204      	movs	r2, #4
 800024a:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = keypad_columns[3];
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <keypad_init+0x110>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	b29a      	uxth	r2, r3
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <keypad_init+0x104>)
 8000254:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <keypad_init+0x104>)
 8000258:	2201      	movs	r2, #1
 800025a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(KEYPAD_PORT, &pincg);
 800025c:	4905      	ldr	r1, [pc, #20]	; (8000274 <keypad_init+0x104>)
 800025e:	4807      	ldr	r0, [pc, #28]	; (800027c <keypad_init+0x10c>)
 8000260:	f000 fbb1 	bl	80009c6 <MCAL_GPIO_init>

    //initially all bits are high 0->8
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0x01FF);
 8000264:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <keypad_init+0x10c>)
 800026a:	f000 fc5d 	bl	8000b28 <MCAL_GPIO_WritePort>

}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	2000003c 	.word	0x2000003c
 8000278:	20000000 	.word	0x20000000
 800027c:	40010c00 	.word	0x40010c00
 8000280:	20000010 	.word	0x20000010

08000284 <keypad_getkey>:

char keypad_getkey(){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0

	int i,j;
	for(i=0 ; i<4 ; i++){
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	e0b4      	b.n	80003fa <keypad_getkey+0x176>

		//at first all columns high
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_columns[0], GPIO_PIN_STATE_HIGH);
 8000290:	4b5e      	ldr	r3, [pc, #376]	; (800040c <keypad_getkey+0x188>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	b29b      	uxth	r3, r3
 8000296:	2201      	movs	r2, #1
 8000298:	4619      	mov	r1, r3
 800029a:	485d      	ldr	r0, [pc, #372]	; (8000410 <keypad_getkey+0x18c>)
 800029c:	f000 fc2d 	bl	8000afa <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_columns[1], GPIO_PIN_STATE_HIGH);
 80002a0:	4b5a      	ldr	r3, [pc, #360]	; (800040c <keypad_getkey+0x188>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	2201      	movs	r2, #1
 80002a8:	4619      	mov	r1, r3
 80002aa:	4859      	ldr	r0, [pc, #356]	; (8000410 <keypad_getkey+0x18c>)
 80002ac:	f000 fc25 	bl	8000afa <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_columns[2], GPIO_PIN_STATE_HIGH);
 80002b0:	4b56      	ldr	r3, [pc, #344]	; (800040c <keypad_getkey+0x188>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	2201      	movs	r2, #1
 80002b8:	4619      	mov	r1, r3
 80002ba:	4855      	ldr	r0, [pc, #340]	; (8000410 <keypad_getkey+0x18c>)
 80002bc:	f000 fc1d 	bl	8000afa <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_columns[3], GPIO_PIN_STATE_HIGH);
 80002c0:	4b52      	ldr	r3, [pc, #328]	; (800040c <keypad_getkey+0x188>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	2201      	movs	r2, #1
 80002c8:	4619      	mov	r1, r3
 80002ca:	4851      	ldr	r0, [pc, #324]	; (8000410 <keypad_getkey+0x18c>)
 80002cc:	f000 fc15 	bl	8000afa <MCAL_GPIO_WritePin>

		//choose one column to be be tested
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_columns[i], GPIO_PIN_STATE_LOW);
 80002d0:	4a4e      	ldr	r2, [pc, #312]	; (800040c <keypad_getkey+0x188>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	2200      	movs	r2, #0
 80002dc:	4619      	mov	r1, r3
 80002de:	484c      	ldr	r0, [pc, #304]	; (8000410 <keypad_getkey+0x18c>)
 80002e0:	f000 fc0b 	bl	8000afa <MCAL_GPIO_WritePin>

		for(j=0 ; j<4 ; j++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	e080      	b.n	80003ec <keypad_getkey+0x168>
		{
			if((MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_rows[j]))==0) //switch is pressed
 80002ea:	4a4a      	ldr	r2, [pc, #296]	; (8000414 <keypad_getkey+0x190>)
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	4619      	mov	r1, r3
 80002f6:	4846      	ldr	r0, [pc, #280]	; (8000410 <keypad_getkey+0x18c>)
 80002f8:	f000 fbe8 	bl	8000acc <MCAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d171      	bne.n	80003e6 <keypad_getkey+0x162>
			{
				while((MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_rows[j]))==0);
 8000302:	bf00      	nop
 8000304:	4a43      	ldr	r2, [pc, #268]	; (8000414 <keypad_getkey+0x190>)
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030c:	b29b      	uxth	r3, r3
 800030e:	4619      	mov	r1, r3
 8000310:	483f      	ldr	r0, [pc, #252]	; (8000410 <keypad_getkey+0x18c>)
 8000312:	f000 fbdb 	bl	8000acc <MCAL_GPIO_ReadPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f3      	beq.n	8000304 <keypad_getkey+0x80>
				switch(i)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b03      	cmp	r3, #3
 8000320:	d861      	bhi.n	80003e6 <keypad_getkey+0x162>
 8000322:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <keypad_getkey+0xa4>)
 8000324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000328:	08000339 	.word	0x08000339
 800032c:	08000361 	.word	0x08000361
 8000330:	08000389 	.word	0x08000389
 8000334:	080003b1 	.word	0x080003b1
				{
				//first row
				case 0:
				{
					if(j==0) return '7';
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d101      	bne.n	8000342 <keypad_getkey+0xbe>
 800033e:	2337      	movs	r3, #55	; 0x37
 8000340:	e060      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==1) return '4';
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <keypad_getkey+0xc8>
 8000348:	2334      	movs	r3, #52	; 0x34
 800034a:	e05b      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==2) return '1';
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d101      	bne.n	8000356 <keypad_getkey+0xd2>
 8000352:	2331      	movs	r3, #49	; 0x31
 8000354:	e056      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==3) return '!';
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d13d      	bne.n	80003d8 <keypad_getkey+0x154>
 800035c:	2321      	movs	r3, #33	; 0x21
 800035e:	e051      	b.n	8000404 <keypad_getkey+0x180>
					break;
				}
				//second row
				case 1:
				{
					if(j==0) return '8';
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <keypad_getkey+0xe6>
 8000366:	2338      	movs	r3, #56	; 0x38
 8000368:	e04c      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==1) return '5';
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d101      	bne.n	8000374 <keypad_getkey+0xf0>
 8000370:	2335      	movs	r3, #53	; 0x35
 8000372:	e047      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==2) return '2';
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d101      	bne.n	800037e <keypad_getkey+0xfa>
 800037a:	2332      	movs	r3, #50	; 0x32
 800037c:	e042      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==3) return '0';
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d12b      	bne.n	80003dc <keypad_getkey+0x158>
 8000384:	2330      	movs	r3, #48	; 0x30
 8000386:	e03d      	b.n	8000404 <keypad_getkey+0x180>
					break;
				}
				//third row
				case 2:
				{
					if(j==0) return '9';
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <keypad_getkey+0x10e>
 800038e:	2339      	movs	r3, #57	; 0x39
 8000390:	e038      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==1) return '6';
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d101      	bne.n	800039c <keypad_getkey+0x118>
 8000398:	2336      	movs	r3, #54	; 0x36
 800039a:	e033      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==2) return '3';
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d101      	bne.n	80003a6 <keypad_getkey+0x122>
 80003a2:	2333      	movs	r3, #51	; 0x33
 80003a4:	e02e      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==3) return '=';
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d119      	bne.n	80003e0 <keypad_getkey+0x15c>
 80003ac:	233d      	movs	r3, #61	; 0x3d
 80003ae:	e029      	b.n	8000404 <keypad_getkey+0x180>
					break;
				}
				//fourth row
				case 3:
				{
					if(j==0) return '/';
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d101      	bne.n	80003ba <keypad_getkey+0x136>
 80003b6:	232f      	movs	r3, #47	; 0x2f
 80003b8:	e024      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==1) return '*';
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d101      	bne.n	80003c4 <keypad_getkey+0x140>
 80003c0:	232a      	movs	r3, #42	; 0x2a
 80003c2:	e01f      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==2) return '-';
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d101      	bne.n	80003ce <keypad_getkey+0x14a>
 80003ca:	232d      	movs	r3, #45	; 0x2d
 80003cc:	e01a      	b.n	8000404 <keypad_getkey+0x180>
					else if (j==3) return '+';
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d107      	bne.n	80003e4 <keypad_getkey+0x160>
 80003d4:	232b      	movs	r3, #43	; 0x2b
 80003d6:	e015      	b.n	8000404 <keypad_getkey+0x180>
					break;
 80003d8:	bf00      	nop
 80003da:	e004      	b.n	80003e6 <keypad_getkey+0x162>
					break;
 80003dc:	bf00      	nop
 80003de:	e002      	b.n	80003e6 <keypad_getkey+0x162>
					break;
 80003e0:	bf00      	nop
 80003e2:	e000      	b.n	80003e6 <keypad_getkey+0x162>
					break;
 80003e4:	bf00      	nop
		for(j=0 ; j<4 ; j++)
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	3301      	adds	r3, #1
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	2b03      	cmp	r3, #3
 80003f0:	f77f af7b 	ble.w	80002ea <keypad_getkey+0x66>
	for(i=0 ; i<4 ; i++){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3301      	adds	r3, #1
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b03      	cmp	r3, #3
 80003fe:	f77f af47 	ble.w	8000290 <keypad_getkey+0xc>
				}
				}
			}
		}
	}
	return 'A';
 8000402:	2341      	movs	r3, #65	; 0x41
}
 8000404:	4618      	mov	r0, r3
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000010 	.word	0x20000010
 8000410:	40010c00 	.word	0x40010c00
 8000414:	20000000 	.word	0x20000000

08000418 <Waiting>:
#include "LCD.h"

GPIO_Pin_Config_t pincg;

void Waiting(unsigned int x)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i=0 ; i<x ; i++)
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	e00b      	b.n	800043e <Waiting+0x26>
		for(j=0 ; j<255 ; j++);
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	e002      	b.n	8000432 <Waiting+0x1a>
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	3301      	adds	r3, #1
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	2bfe      	cmp	r3, #254	; 0xfe
 8000436:	ddf9      	ble.n	800042c <Waiting+0x14>
	for(i=0 ; i<x ; i++)
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	3301      	adds	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	429a      	cmp	r2, r3
 8000444:	d8ef      	bhi.n	8000426 <Waiting+0xe>

}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <lcd_kick>:

void lcd_kick(){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(LCD_CTRL, EN, 1);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045a:	4807      	ldr	r0, [pc, #28]	; (8000478 <lcd_kick+0x28>)
 800045c:	f000 fb4d 	bl	8000afa <MCAL_GPIO_WritePin>
	Waiting(20);
 8000460:	2014      	movs	r0, #20
 8000462:	f7ff ffd9 	bl	8000418 <Waiting>
	MCAL_GPIO_WritePin(LCD_CTRL, EN, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <lcd_kick+0x28>)
 800046e:	f000 fb44 	bl	8000afa <MCAL_GPIO_WritePin>
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40010800 	.word	0x40010800

0800047c <lcd_is_busy>:

void lcd_is_busy(){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

#ifdef EIGHT_BIT_MODE

	//input mode for all 8 bits

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_INPUT_FLOA;
 8000480:	4b7b      	ldr	r3, [pc, #492]	; (8000670 <lcd_is_busy+0x1f4>)
 8000482:	2201      	movs	r2, #1
 8000484:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_0;
 8000486:	4b7a      	ldr	r3, [pc, #488]	; (8000670 <lcd_is_busy+0x1f4>)
 8000488:	2201      	movs	r2, #1
 800048a:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 800048c:	4978      	ldr	r1, [pc, #480]	; (8000670 <lcd_is_busy+0x1f4>)
 800048e:	4879      	ldr	r0, [pc, #484]	; (8000674 <lcd_is_busy+0x1f8>)
 8000490:	f000 fa99 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_INPUT_FLOA;
 8000494:	4b76      	ldr	r3, [pc, #472]	; (8000670 <lcd_is_busy+0x1f4>)
 8000496:	2201      	movs	r2, #1
 8000498:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_1;
 800049a:	4b75      	ldr	r3, [pc, #468]	; (8000670 <lcd_is_busy+0x1f4>)
 800049c:	2202      	movs	r2, #2
 800049e:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80004a0:	4973      	ldr	r1, [pc, #460]	; (8000670 <lcd_is_busy+0x1f4>)
 80004a2:	4874      	ldr	r0, [pc, #464]	; (8000674 <lcd_is_busy+0x1f8>)
 80004a4:	f000 fa8f 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_INPUT_FLOA;
 80004a8:	4b71      	ldr	r3, [pc, #452]	; (8000670 <lcd_is_busy+0x1f4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_2;
 80004ae:	4b70      	ldr	r3, [pc, #448]	; (8000670 <lcd_is_busy+0x1f4>)
 80004b0:	2204      	movs	r2, #4
 80004b2:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80004b4:	496e      	ldr	r1, [pc, #440]	; (8000670 <lcd_is_busy+0x1f4>)
 80004b6:	486f      	ldr	r0, [pc, #444]	; (8000674 <lcd_is_busy+0x1f8>)
 80004b8:	f000 fa85 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_INPUT_FLOA;
 80004bc:	4b6c      	ldr	r3, [pc, #432]	; (8000670 <lcd_is_busy+0x1f4>)
 80004be:	2201      	movs	r2, #1
 80004c0:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_3;
 80004c2:	4b6b      	ldr	r3, [pc, #428]	; (8000670 <lcd_is_busy+0x1f4>)
 80004c4:	2208      	movs	r2, #8
 80004c6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80004c8:	4969      	ldr	r1, [pc, #420]	; (8000670 <lcd_is_busy+0x1f4>)
 80004ca:	486a      	ldr	r0, [pc, #424]	; (8000674 <lcd_is_busy+0x1f8>)
 80004cc:	f000 fa7b 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_INPUT_FLOA;
 80004d0:	4b67      	ldr	r3, [pc, #412]	; (8000670 <lcd_is_busy+0x1f4>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_4;
 80004d6:	4b66      	ldr	r3, [pc, #408]	; (8000670 <lcd_is_busy+0x1f4>)
 80004d8:	2210      	movs	r2, #16
 80004da:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80004dc:	4964      	ldr	r1, [pc, #400]	; (8000670 <lcd_is_busy+0x1f4>)
 80004de:	4865      	ldr	r0, [pc, #404]	; (8000674 <lcd_is_busy+0x1f8>)
 80004e0:	f000 fa71 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_INPUT_FLOA;
 80004e4:	4b62      	ldr	r3, [pc, #392]	; (8000670 <lcd_is_busy+0x1f4>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_5;
 80004ea:	4b61      	ldr	r3, [pc, #388]	; (8000670 <lcd_is_busy+0x1f4>)
 80004ec:	2220      	movs	r2, #32
 80004ee:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80004f0:	495f      	ldr	r1, [pc, #380]	; (8000670 <lcd_is_busy+0x1f4>)
 80004f2:	4860      	ldr	r0, [pc, #384]	; (8000674 <lcd_is_busy+0x1f8>)
 80004f4:	f000 fa67 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_INPUT_FLOA;
 80004f8:	4b5d      	ldr	r3, [pc, #372]	; (8000670 <lcd_is_busy+0x1f4>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_6;
 80004fe:	4b5c      	ldr	r3, [pc, #368]	; (8000670 <lcd_is_busy+0x1f4>)
 8000500:	2240      	movs	r2, #64	; 0x40
 8000502:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 8000504:	495a      	ldr	r1, [pc, #360]	; (8000670 <lcd_is_busy+0x1f4>)
 8000506:	485b      	ldr	r0, [pc, #364]	; (8000674 <lcd_is_busy+0x1f8>)
 8000508:	f000 fa5d 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_INPUT_FLOA;
 800050c:	4b58      	ldr	r3, [pc, #352]	; (8000670 <lcd_is_busy+0x1f4>)
 800050e:	2201      	movs	r2, #1
 8000510:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_7;
 8000512:	4b57      	ldr	r3, [pc, #348]	; (8000670 <lcd_is_busy+0x1f4>)
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 8000518:	4955      	ldr	r1, [pc, #340]	; (8000670 <lcd_is_busy+0x1f4>)
 800051a:	4856      	ldr	r0, [pc, #344]	; (8000674 <lcd_is_busy+0x1f8>)
 800051c:	f000 fa53 	bl	80009c6 <MCAL_GPIO_init>
#ifdef FOUR_BIT_MODE
	LCD_PORT_DIRCTION &= ~(0xFF << DATA_SHIFT); //input mode for higher 4 bits
#endif
	 */

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000520:	4b53      	ldr	r3, [pc, #332]	; (8000670 <lcd_is_busy+0x1f4>)
 8000522:	2204      	movs	r2, #4
 8000524:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = RS;
 8000526:	4b52      	ldr	r3, [pc, #328]	; (8000670 <lcd_is_busy+0x1f4>)
 8000528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052c:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800052e:	4b50      	ldr	r3, [pc, #320]	; (8000670 <lcd_is_busy+0x1f4>)
 8000530:	2201      	movs	r2, #1
 8000532:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_CTRL, &pincg);
 8000534:	494e      	ldr	r1, [pc, #312]	; (8000670 <lcd_is_busy+0x1f4>)
 8000536:	484f      	ldr	r0, [pc, #316]	; (8000674 <lcd_is_busy+0x1f8>)
 8000538:	f000 fa45 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 800053c:	4b4c      	ldr	r3, [pc, #304]	; (8000670 <lcd_is_busy+0x1f4>)
 800053e:	2204      	movs	r2, #4
 8000540:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = RW;
 8000542:	4b4b      	ldr	r3, [pc, #300]	; (8000670 <lcd_is_busy+0x1f4>)
 8000544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000548:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800054a:	4b49      	ldr	r3, [pc, #292]	; (8000670 <lcd_is_busy+0x1f4>)
 800054c:	2201      	movs	r2, #1
 800054e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_CTRL, &pincg);
 8000550:	4947      	ldr	r1, [pc, #284]	; (8000670 <lcd_is_busy+0x1f4>)
 8000552:	4848      	ldr	r0, [pc, #288]	; (8000674 <lcd_is_busy+0x1f8>)
 8000554:	f000 fa37 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000558:	4b45      	ldr	r3, [pc, #276]	; (8000670 <lcd_is_busy+0x1f4>)
 800055a:	2204      	movs	r2, #4
 800055c:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = EN;
 800055e:	4b44      	ldr	r3, [pc, #272]	; (8000670 <lcd_is_busy+0x1f4>)
 8000560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000564:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000566:	4b42      	ldr	r3, [pc, #264]	; (8000670 <lcd_is_busy+0x1f4>)
 8000568:	2201      	movs	r2, #1
 800056a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_CTRL, &pincg);
 800056c:	4940      	ldr	r1, [pc, #256]	; (8000670 <lcd_is_busy+0x1f4>)
 800056e:	4841      	ldr	r0, [pc, #260]	; (8000674 <lcd_is_busy+0x1f8>)
 8000570:	f000 fa29 	bl	80009c6 <MCAL_GPIO_init>

	MCAL_GPIO_WritePin(LCD_CTRL, RS, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800057a:	483e      	ldr	r0, [pc, #248]	; (8000674 <lcd_is_busy+0x1f8>)
 800057c:	f000 fabd 	bl	8000afa <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW, 1); //read mode
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000586:	483b      	ldr	r0, [pc, #236]	; (8000674 <lcd_is_busy+0x1f8>)
 8000588:	f000 fab7 	bl	8000afa <MCAL_GPIO_WritePin>
	lcd_kick();
 800058c:	f7ff ff60 	bl	8000450 <lcd_kick>

	//output mode
	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <lcd_is_busy+0x1f4>)
 8000592:	2204      	movs	r2, #4
 8000594:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_0;
 8000596:	4b36      	ldr	r3, [pc, #216]	; (8000670 <lcd_is_busy+0x1f4>)
 8000598:	2201      	movs	r2, #1
 800059a:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800059c:	4b34      	ldr	r3, [pc, #208]	; (8000670 <lcd_is_busy+0x1f4>)
 800059e:	2201      	movs	r2, #1
 80005a0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80005a2:	4933      	ldr	r1, [pc, #204]	; (8000670 <lcd_is_busy+0x1f4>)
 80005a4:	4833      	ldr	r0, [pc, #204]	; (8000674 <lcd_is_busy+0x1f8>)
 80005a6:	f000 fa0e 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <lcd_is_busy+0x1f4>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_1;
 80005b0:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <lcd_is_busy+0x1f4>)
 80005b2:	2202      	movs	r2, #2
 80005b4:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <lcd_is_busy+0x1f4>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80005bc:	492c      	ldr	r1, [pc, #176]	; (8000670 <lcd_is_busy+0x1f4>)
 80005be:	482d      	ldr	r0, [pc, #180]	; (8000674 <lcd_is_busy+0x1f8>)
 80005c0:	f000 fa01 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <lcd_is_busy+0x1f4>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_2;
 80005ca:	4b29      	ldr	r3, [pc, #164]	; (8000670 <lcd_is_busy+0x1f4>)
 80005cc:	2204      	movs	r2, #4
 80005ce:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <lcd_is_busy+0x1f4>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80005d6:	4926      	ldr	r1, [pc, #152]	; (8000670 <lcd_is_busy+0x1f4>)
 80005d8:	4826      	ldr	r0, [pc, #152]	; (8000674 <lcd_is_busy+0x1f8>)
 80005da:	f000 f9f4 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <lcd_is_busy+0x1f4>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_3;
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <lcd_is_busy+0x1f4>)
 80005e6:	2208      	movs	r2, #8
 80005e8:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <lcd_is_busy+0x1f4>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80005f0:	491f      	ldr	r1, [pc, #124]	; (8000670 <lcd_is_busy+0x1f4>)
 80005f2:	4820      	ldr	r0, [pc, #128]	; (8000674 <lcd_is_busy+0x1f8>)
 80005f4:	f000 f9e7 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <lcd_is_busy+0x1f4>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_4;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <lcd_is_busy+0x1f4>)
 8000600:	2210      	movs	r2, #16
 8000602:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <lcd_is_busy+0x1f4>)
 8000606:	2201      	movs	r2, #1
 8000608:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 800060a:	4919      	ldr	r1, [pc, #100]	; (8000670 <lcd_is_busy+0x1f4>)
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <lcd_is_busy+0x1f8>)
 800060e:	f000 f9da 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <lcd_is_busy+0x1f4>)
 8000614:	2204      	movs	r2, #4
 8000616:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_5;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <lcd_is_busy+0x1f4>)
 800061a:	2220      	movs	r2, #32
 800061c:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <lcd_is_busy+0x1f4>)
 8000620:	2201      	movs	r2, #1
 8000622:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 8000624:	4912      	ldr	r1, [pc, #72]	; (8000670 <lcd_is_busy+0x1f4>)
 8000626:	4813      	ldr	r0, [pc, #76]	; (8000674 <lcd_is_busy+0x1f8>)
 8000628:	f000 f9cd 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <lcd_is_busy+0x1f4>)
 800062e:	2204      	movs	r2, #4
 8000630:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_6;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <lcd_is_busy+0x1f4>)
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <lcd_is_busy+0x1f4>)
 800063a:	2201      	movs	r2, #1
 800063c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 800063e:	490c      	ldr	r1, [pc, #48]	; (8000670 <lcd_is_busy+0x1f4>)
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <lcd_is_busy+0x1f8>)
 8000642:	f000 f9c0 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <lcd_is_busy+0x1f4>)
 8000648:	2204      	movs	r2, #4
 800064a:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_7;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <lcd_is_busy+0x1f4>)
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <lcd_is_busy+0x1f4>)
 8000654:	2201      	movs	r2, #1
 8000656:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 8000658:	4905      	ldr	r1, [pc, #20]	; (8000670 <lcd_is_busy+0x1f4>)
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <lcd_is_busy+0x1f8>)
 800065c:	f000 f9b3 	bl	80009c6 <MCAL_GPIO_init>

	MCAL_GPIO_WritePin(LCD_CTRL, RW, 0); //write mode
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <lcd_is_busy+0x1f8>)
 8000668:	f000 fa47 	bl	8000afa <MCAL_GPIO_WritePin>

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000003c 	.word	0x2000003c
 8000674:	40010800 	.word	0x40010800

08000678 <lcd_init>:

void lcd_init(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	Waiting(20);
 800067c:	2014      	movs	r0, #20
 800067e:	f7ff fecb 	bl	8000418 <Waiting>
	lcd_is_busy();
 8000682:	f7ff fefb 	bl	800047c <lcd_is_busy>

	//output mode

	//MODE: 01: Output mode, max speed 10 MHz.
	//CNF: 00: General purpose output push-pull.
	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000686:	4b5c      	ldr	r3, [pc, #368]	; (80007f8 <lcd_init+0x180>)
 8000688:	2204      	movs	r2, #4
 800068a:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = RS;
 800068c:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <lcd_init+0x180>)
 800068e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000692:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000694:	4b58      	ldr	r3, [pc, #352]	; (80007f8 <lcd_init+0x180>)
 8000696:	2201      	movs	r2, #1
 8000698:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_CTRL, &pincg);
 800069a:	4957      	ldr	r1, [pc, #348]	; (80007f8 <lcd_init+0x180>)
 800069c:	4857      	ldr	r0, [pc, #348]	; (80007fc <lcd_init+0x184>)
 800069e:	f000 f992 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80006a2:	4b55      	ldr	r3, [pc, #340]	; (80007f8 <lcd_init+0x180>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = RW;
 80006a8:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <lcd_init+0x180>)
 80006aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ae:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80006b0:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <lcd_init+0x180>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_CTRL, &pincg);
 80006b6:	4950      	ldr	r1, [pc, #320]	; (80007f8 <lcd_init+0x180>)
 80006b8:	4850      	ldr	r0, [pc, #320]	; (80007fc <lcd_init+0x184>)
 80006ba:	f000 f984 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80006be:	4b4e      	ldr	r3, [pc, #312]	; (80007f8 <lcd_init+0x180>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = EN;
 80006c4:	4b4c      	ldr	r3, [pc, #304]	; (80007f8 <lcd_init+0x180>)
 80006c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ca:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80006cc:	4b4a      	ldr	r3, [pc, #296]	; (80007f8 <lcd_init+0x180>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_CTRL, &pincg);
 80006d2:	4949      	ldr	r1, [pc, #292]	; (80007f8 <lcd_init+0x180>)
 80006d4:	4849      	ldr	r0, [pc, #292]	; (80007fc <lcd_init+0x184>)
 80006d6:	f000 f976 	bl	80009c6 <MCAL_GPIO_init>

	//low for control pins
	MCAL_GPIO_WritePin(LCD_CTRL, EN, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e0:	4846      	ldr	r0, [pc, #280]	; (80007fc <lcd_init+0x184>)
 80006e2:	f000 fa0a 	bl	8000afa <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ec:	4843      	ldr	r0, [pc, #268]	; (80007fc <lcd_init+0x184>)
 80006ee:	f000 fa04 	bl	8000afa <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	4840      	ldr	r0, [pc, #256]	; (80007fc <lcd_init+0x184>)
 80006fa:	f000 f9fe 	bl	8000afa <MCAL_GPIO_WritePin>

	//output mode
	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80006fe:	4b3e      	ldr	r3, [pc, #248]	; (80007f8 <lcd_init+0x180>)
 8000700:	2204      	movs	r2, #4
 8000702:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_0;
 8000704:	4b3c      	ldr	r3, [pc, #240]	; (80007f8 <lcd_init+0x180>)
 8000706:	2201      	movs	r2, #1
 8000708:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800070a:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <lcd_init+0x180>)
 800070c:	2201      	movs	r2, #1
 800070e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 8000710:	4939      	ldr	r1, [pc, #228]	; (80007f8 <lcd_init+0x180>)
 8000712:	483a      	ldr	r0, [pc, #232]	; (80007fc <lcd_init+0x184>)
 8000714:	f000 f957 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000718:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <lcd_init+0x180>)
 800071a:	2204      	movs	r2, #4
 800071c:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_1;
 800071e:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <lcd_init+0x180>)
 8000720:	2202      	movs	r2, #2
 8000722:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000724:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <lcd_init+0x180>)
 8000726:	2201      	movs	r2, #1
 8000728:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 800072a:	4933      	ldr	r1, [pc, #204]	; (80007f8 <lcd_init+0x180>)
 800072c:	4833      	ldr	r0, [pc, #204]	; (80007fc <lcd_init+0x184>)
 800072e:	f000 f94a 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000732:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <lcd_init+0x180>)
 8000734:	2204      	movs	r2, #4
 8000736:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_2;
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <lcd_init+0x180>)
 800073a:	2204      	movs	r2, #4
 800073c:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <lcd_init+0x180>)
 8000740:	2201      	movs	r2, #1
 8000742:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 8000744:	492c      	ldr	r1, [pc, #176]	; (80007f8 <lcd_init+0x180>)
 8000746:	482d      	ldr	r0, [pc, #180]	; (80007fc <lcd_init+0x184>)
 8000748:	f000 f93d 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <lcd_init+0x180>)
 800074e:	2204      	movs	r2, #4
 8000750:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_3;
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <lcd_init+0x180>)
 8000754:	2208      	movs	r2, #8
 8000756:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <lcd_init+0x180>)
 800075a:	2201      	movs	r2, #1
 800075c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 800075e:	4926      	ldr	r1, [pc, #152]	; (80007f8 <lcd_init+0x180>)
 8000760:	4826      	ldr	r0, [pc, #152]	; (80007fc <lcd_init+0x184>)
 8000762:	f000 f930 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <lcd_init+0x180>)
 8000768:	2204      	movs	r2, #4
 800076a:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_4;
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <lcd_init+0x180>)
 800076e:	2210      	movs	r2, #16
 8000770:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <lcd_init+0x180>)
 8000774:	2201      	movs	r2, #1
 8000776:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 8000778:	491f      	ldr	r1, [pc, #124]	; (80007f8 <lcd_init+0x180>)
 800077a:	4820      	ldr	r0, [pc, #128]	; (80007fc <lcd_init+0x184>)
 800077c:	f000 f923 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <lcd_init+0x180>)
 8000782:	2204      	movs	r2, #4
 8000784:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_5;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <lcd_init+0x180>)
 8000788:	2220      	movs	r2, #32
 800078a:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <lcd_init+0x180>)
 800078e:	2201      	movs	r2, #1
 8000790:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 8000792:	4919      	ldr	r1, [pc, #100]	; (80007f8 <lcd_init+0x180>)
 8000794:	4819      	ldr	r0, [pc, #100]	; (80007fc <lcd_init+0x184>)
 8000796:	f000 f916 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <lcd_init+0x180>)
 800079c:	2204      	movs	r2, #4
 800079e:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_6;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <lcd_init+0x180>)
 80007a2:	2240      	movs	r2, #64	; 0x40
 80007a4:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <lcd_init+0x180>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80007ac:	4912      	ldr	r1, [pc, #72]	; (80007f8 <lcd_init+0x180>)
 80007ae:	4813      	ldr	r0, [pc, #76]	; (80007fc <lcd_init+0x184>)
 80007b0:	f000 f909 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <lcd_init+0x180>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = GPIO_PIN_7;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <lcd_init+0x180>)
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <lcd_init+0x180>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_PORT, &pincg);
 80007c6:	490c      	ldr	r1, [pc, #48]	; (80007f8 <lcd_init+0x180>)
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <lcd_init+0x184>)
 80007ca:	f000 f8fc 	bl	80009c6 <MCAL_GPIO_init>

	Waiting(20);
 80007ce:	2014      	movs	r0, #20
 80007d0:	f7ff fe22 	bl	8000418 <Waiting>
	lcd_cmd(LCD_CLEAR);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 f813 	bl	8000800 <lcd_cmd>

#ifdef EIGHT_BIT_MODE
	lcd_cmd(LCD_FUNCTION_8BIT_2LINES);
 80007da:	2038      	movs	r0, #56	; 0x38
 80007dc:	f000 f810 	bl	8000800 <lcd_cmd>
	lcd_cmd(0x02);
	lcd_cmd(LCD_FUNCTION_4BIT_2LINES);
#endif
	 */
	 
	lcd_cmd(LCD_ENTRY_MODE);
 80007e0:	2006      	movs	r0, #6
 80007e2:	f000 f80d 	bl	8000800 <lcd_cmd>
	lcd_cmd(LCD_CURSOR_BLINKING);
 80007e6:	200f      	movs	r0, #15
 80007e8:	f000 f80a 	bl	8000800 <lcd_cmd>
	lcd_cmd(LCD_BEGIN_AT_FIRST_ROW);
 80007ec:	2080      	movs	r0, #128	; 0x80
 80007ee:	f000 f807 	bl	8000800 <lcd_cmd>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000003c 	.word	0x2000003c
 80007fc:	40010800 	.word	0x40010800

08000800 <lcd_cmd>:
			lcd_cmd(LCD_BEGIN_AT_SECOND_ROW+position);
		}
	}
}

void lcd_cmd(unsigned char command){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	lcd_is_busy();
 800080a:	f7ff fe37 	bl	800047c <lcd_is_busy>

#ifdef EIGHT_BIT_MODE

	MCAL_GPIO_WritePort(LCD_PORT, command);
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	b29b      	uxth	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <lcd_cmd+0x40>)
 8000816:	f000 f987 	bl	8000b28 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW, 0); //write mode
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000820:	4807      	ldr	r0, [pc, #28]	; (8000840 <lcd_cmd+0x40>)
 8000822:	f000 f96a 	bl	8000afa <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS, 0); //command
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <lcd_cmd+0x40>)
 800082e:	f000 f964 	bl	8000afa <MCAL_GPIO_WritePin>
	lcd_kick();
 8000832:	f7ff fe0d 	bl	8000450 <lcd_kick>
	reset_bit(LCD_CTRL,RS); //command
	Waiting(1);
	lcd_kick();
#endif
	 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40010800 	.word	0x40010800

08000844 <lcd_write_char>:

void lcd_write_char(unsigned char ch){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]

	lcd_is_busy();
 800084e:	f7ff fe15 	bl	800047c <lcd_is_busy>

#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_PORT, ch);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	b29b      	uxth	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	480a      	ldr	r0, [pc, #40]	; (8000884 <lcd_write_char+0x40>)
 800085a:	f000 f965 	bl	8000b28 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW, 0); //write mode
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <lcd_write_char+0x40>)
 8000866:	f000 f948 	bl	8000afa <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS, 1); //data
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <lcd_write_char+0x40>)
 8000872:	f000 f942 	bl	8000afa <MCAL_GPIO_WritePin>
	lcd_kick();
 8000876:	f7ff fdeb 	bl	8000450 <lcd_kick>
	set_bit(LCD_CTRL,RS); //command
	Waiting(1);
	lcd_kick();
#endif
	 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40010800 	.word	0x40010800

08000888 <lcd_write_word>:

void lcd_write_word(unsigned char *data){
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	lcd_is_busy();
 8000890:	f7ff fdf4 	bl	800047c <lcd_is_busy>
	
#ifdef EIGHT_BIT_MODE
	int i;
	MCAL_GPIO_WritePin(LCD_CTRL, RW, 0); //write mode
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	4818      	ldr	r0, [pc, #96]	; (80008fc <lcd_write_word+0x74>)
 800089c:	f000 f92d 	bl	8000afa <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS, 1); //data
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	4815      	ldr	r0, [pc, #84]	; (80008fc <lcd_write_word+0x74>)
 80008a8:	f000 f927 	bl	8000afa <MCAL_GPIO_WritePin>
	for(i=0 ; data[i] !='\0' ; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	e019      	b.n	80008e6 <lcd_write_word+0x5e>
	{
		if(i==16)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2b10      	cmp	r3, #16
 80008b6:	d103      	bne.n	80008c0 <lcd_write_word+0x38>
		{
			lcd_cmd(LCD_BEGIN_AT_SECOND_ROW);
 80008b8:	20c0      	movs	r0, #192	; 0xc0
 80008ba:	f7ff ffa1 	bl	8000800 <lcd_cmd>
 80008be:	e008      	b.n	80008d2 <lcd_write_word+0x4a>
		}
		else if(i==33)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b21      	cmp	r3, #33	; 0x21
 80008c4:	d105      	bne.n	80008d2 <lcd_write_word+0x4a>
		{
			lcd_cmd(LCD_CLEAR);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff ff9a 	bl	8000800 <lcd_cmd>
			lcd_cmd(LCD_BEGIN_AT_FIRST_ROW);
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	f7ff ff97 	bl	8000800 <lcd_cmd>
		}

		lcd_write_char(data[i]);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ffb2 	bl	8000844 <lcd_write_char>
	for(i=0 ; data[i] !='\0' ; i++)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1df      	bne.n	80008b2 <lcd_write_word+0x2a>
	}

#endif

}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010800 	.word	0x40010800

08000900 <get_pin_position>:
 */


#include "STM32F103C6_GPIO_Driver.h"

uint8_t get_pin_position(uint16_t PinNumber){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]

	switch(PinNumber){
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	2b80      	cmp	r3, #128	; 0x80
 800090e:	d042      	beq.n	8000996 <get_pin_position+0x96>
 8000910:	2b80      	cmp	r3, #128	; 0x80
 8000912:	dc11      	bgt.n	8000938 <get_pin_position+0x38>
 8000914:	2b08      	cmp	r3, #8
 8000916:	d036      	beq.n	8000986 <get_pin_position+0x86>
 8000918:	2b08      	cmp	r3, #8
 800091a:	dc06      	bgt.n	800092a <get_pin_position+0x2a>
 800091c:	2b02      	cmp	r3, #2
 800091e:	d02e      	beq.n	800097e <get_pin_position+0x7e>
 8000920:	2b04      	cmp	r3, #4
 8000922:	d02e      	beq.n	8000982 <get_pin_position+0x82>
 8000924:	2b01      	cmp	r3, #1
 8000926:	d028      	beq.n	800097a <get_pin_position+0x7a>
 8000928:	e047      	b.n	80009ba <get_pin_position+0xba>
 800092a:	2b20      	cmp	r3, #32
 800092c:	d02f      	beq.n	800098e <get_pin_position+0x8e>
 800092e:	2b40      	cmp	r3, #64	; 0x40
 8000930:	d02f      	beq.n	8000992 <get_pin_position+0x92>
 8000932:	2b10      	cmp	r3, #16
 8000934:	d029      	beq.n	800098a <get_pin_position+0x8a>
 8000936:	e040      	b.n	80009ba <get_pin_position+0xba>
 8000938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800093c:	d033      	beq.n	80009a6 <get_pin_position+0xa6>
 800093e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000942:	dc09      	bgt.n	8000958 <get_pin_position+0x58>
 8000944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000948:	d029      	beq.n	800099e <get_pin_position+0x9e>
 800094a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800094e:	d028      	beq.n	80009a2 <get_pin_position+0xa2>
 8000950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000954:	d021      	beq.n	800099a <get_pin_position+0x9a>
 8000956:	e030      	b.n	80009ba <get_pin_position+0xba>
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800095c:	d027      	beq.n	80009ae <get_pin_position+0xae>
 800095e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000962:	dc03      	bgt.n	800096c <get_pin_position+0x6c>
 8000964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000968:	d01f      	beq.n	80009aa <get_pin_position+0xaa>
 800096a:	e026      	b.n	80009ba <get_pin_position+0xba>
 800096c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000970:	d01f      	beq.n	80009b2 <get_pin_position+0xb2>
 8000972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000976:	d01e      	beq.n	80009b6 <get_pin_position+0xb6>
 8000978:	e01f      	b.n	80009ba <get_pin_position+0xba>

	/***CRL***/
	case GPIO_PIN_0:
		return 0;
 800097a:	2300      	movs	r3, #0
 800097c:	e01e      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800097e:	2304      	movs	r3, #4
 8000980:	e01c      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000982:	2308      	movs	r3, #8
 8000984:	e01a      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000986:	230c      	movs	r3, #12
 8000988:	e018      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800098a:	2310      	movs	r3, #16
 800098c:	e016      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800098e:	2314      	movs	r3, #20
 8000990:	e014      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000992:	2318      	movs	r3, #24
 8000994:	e012      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000996:	231c      	movs	r3, #28
 8000998:	e010      	b.n	80009bc <get_pin_position+0xbc>
		break;

	/***CRH***/
	case GPIO_PIN_8:
		return 0;
 800099a:	2300      	movs	r3, #0
 800099c:	e00e      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800099e:	2304      	movs	r3, #4
 80009a0:	e00c      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80009a2:	2308      	movs	r3, #8
 80009a4:	e00a      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80009a6:	230c      	movs	r3, #12
 80009a8:	e008      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80009aa:	2310      	movs	r3, #16
 80009ac:	e006      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80009ae:	2314      	movs	r3, #20
 80009b0:	e004      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80009b2:	2318      	movs	r3, #24
 80009b4:	e002      	b.n	80009bc <get_pin_position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80009b6:	231c      	movs	r3, #28
 80009b8:	e000      	b.n	80009bc <get_pin_position+0xbc>
		break;

	}

return 1;
 80009ba:	2301      	movs	r3, #1


}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <MCAL_GPIO_init>:
 * @retval 		- None
 * Note			- STM32F103C6 MCU has GPIO A,B,C,D,E modules
 * 				  but LQFP48 package has only A,B, part of C,D exported as external pins from the modules
 **================================================================*/

void MCAL_GPIO_init(GPIO_TypeDef *GPIOx , GPIO_Pin_Config_t *pin){
 80009c6:	b590      	push	{r4, r7, lr}
 80009c8:	b085      	sub	sp, #20
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) configure pins from 0 --> 7
	//Port configuration register high (GPIOx_CRH) configure pins from 8 --> 15

	uint8_t pin_config = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]

	//pointer to the configuration register
	volatile uint32_t* ConfigRegister = NULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
	ConfigRegister = (pin->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2bff      	cmp	r3, #255	; 0xff
 80009de:	d801      	bhi.n	80009e4 <MCAL_GPIO_init+0x1e>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	e001      	b.n	80009e8 <MCAL_GPIO_init+0x22>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3304      	adds	r3, #4
 80009e8:	60bb      	str	r3, [r7, #8]

	//clear  CNF[1:0] MODE[1:0]
	(*ConfigRegister) &= ~(0xf << get_pin_position(pin->GPIO_PinNumber));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff86 	bl	8000900 <get_pin_position>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	230f      	movs	r3, #15
 80009fa:	4093      	lsls	r3, r2
 80009fc:	43da      	mvns	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	401a      	ands	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pin->GPIO_PinConfig == GPIO_PIN_MODE_OUTPUT_PP) || (pin->GPIO_PinConfig == GPIO_PIN_MODE_OUTPUT_OD) || (pin->GPIO_PinConfig == GPIO_PIN_MODE_ALT_OUTPUT_PP) || (pin->GPIO_PinConfig == GPIO_PIN_MODE_ALT_OUTPUT_OD))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d00b      	beq.n	8000a28 <MCAL_GPIO_init+0x62>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	789b      	ldrb	r3, [r3, #2]
 8000a14:	2b05      	cmp	r3, #5
 8000a16:	d007      	beq.n	8000a28 <MCAL_GPIO_init+0x62>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	789b      	ldrb	r3, [r3, #2]
 8000a1c:	2b06      	cmp	r3, #6
 8000a1e:	d003      	beq.n	8000a28 <MCAL_GPIO_init+0x62>
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	789b      	ldrb	r3, [r3, #2]
 8000a24:	2b07      	cmp	r3, #7
 8000a26:	d10e      	bne.n	8000a46 <MCAL_GPIO_init+0x80>
	{
		//set CNF[1:0] MODE[1:0]
		pin_config = ((((pin->GPIO_PinConfig - 4) <<2) | (pin->GPIO_Output_Speed)) & 0x0F);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	789b      	ldrb	r3, [r3, #2]
 8000a2c:	3b04      	subs	r3, #4
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	b25a      	sxtb	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	78db      	ldrb	r3, [r3, #3]
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e030      	b.n	8000aa8 <MCAL_GPIO_init+0xe2>
	}

	//if pin is input
	else
	{
		if((pin->GPIO_PinConfig == GPIO_PIN_MODE_Analog) || (pin->GPIO_PinConfig == GPIO_PIN_MODE_INPUT_FLOA))
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	789b      	ldrb	r3, [r3, #2]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <MCAL_GPIO_init+0x90>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	789b      	ldrb	r3, [r3, #2]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d107      	bne.n	8000a66 <MCAL_GPIO_init+0xa0>
		{
			pin_config = (((pin->GPIO_PinConfig << 2) | 0x0) & 0x0F);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e020      	b.n	8000aa8 <MCAL_GPIO_init+0xe2>
		}
		//configured as input floating
		else if (pin->GPIO_PinConfig == GPIO_PIN_MODE_ALT_INPUT)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	789b      	ldrb	r3, [r3, #2]
 8000a6a:	2b08      	cmp	r3, #8
 8000a6c:	d102      	bne.n	8000a74 <MCAL_GPIO_init+0xae>
		{
			pin_config = (((GPIO_PIN_MODE_INPUT_FLOA<< 2) | 0x0) & 0x0F);
 8000a6e:	2304      	movs	r3, #4
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e019      	b.n	8000aa8 <MCAL_GPIO_init+0xe2>
		}
		else
		{
			//PU or PD input
			pin_config = (((GPIO_PIN_MODE_INPUT_PU << 2) | 0x0) & 0x0F);
 8000a74:	2308      	movs	r3, #8
 8000a76:	73fb      	strb	r3, [r7, #15]

			if(pin->GPIO_PinConfig == GPIO_PIN_MODE_INPUT_PU)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d107      	bne.n	8000a90 <MCAL_GPIO_init+0xca>
			{
				//Table 20. Port bit configuration table
				//PxODR register = 1
				GPIOx->ODR |= pin->GPIO_PinNumber;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	8812      	ldrh	r2, [r2, #0]
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	e00b      	b.n	8000aa8 <MCAL_GPIO_init+0xe2>
			}
			else if (pin->GPIO_PinConfig == GPIO_PIN_MODE_INPUT_PD)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	789b      	ldrb	r3, [r3, #2]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d107      	bne.n	8000aa8 <MCAL_GPIO_init+0xe2>
			{
				//Table 20. Port bit configuration table
				//PxODR register = 0
				GPIOx->ODR &= ~(pin->GPIO_PinNumber);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	8812      	ldrh	r2, [r2, #0]
 8000aa0:	43d2      	mvns	r2, r2
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*ConfigRegister) |= (pin_config << get_pin_position(pin->GPIO_PinNumber));
 8000aa8:	7bfc      	ldrb	r4, [r7, #15]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff26 	bl	8000900 <get_pin_position>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	fa04 f203 	lsl.w	r2, r4, r3
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	601a      	str	r2, [r3, #0]

}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd90      	pop	{r4, r7, pc}

08000acc <MCAL_GPIO_ReadPin>:
 * @param [in]	- PinNumber: set pin number according to @ref GPIO_PINS_define
 * @retval 		- the input pin value according to @ref GPIO_PIN_STATE_define
 * Note			- None
 **================================================================*/

uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber){
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]

	uint8_t PinStatus;
	if(((GPIOx->IDR & PinNumber) != (uint8_t)GPIO_PIN_STATE_LOW))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	887b      	ldrh	r3, [r7, #2]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <MCAL_GPIO_ReadPin+0x1e>
	{
		PinStatus = GPIO_PIN_STATE_HIGH;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e001      	b.n	8000aee <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		PinStatus = GPIO_PIN_STATE_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
	}

	return PinStatus;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <MCAL_GPIO_WritePin>:
 * @param [in]	- value: pin value
 * @retval 		- None
 * Note			- None
 **================================================================*/

void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t value){
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]
 8000b06:	4613      	mov	r3, r2
 8000b08:	707b      	strb	r3, [r7, #1]

	if((value != (uint8_t)GPIO_PIN_STATE_LOW))
 8000b0a:	787b      	ldrb	r3, [r7, #1]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <MCAL_GPIO_WritePin+0x1e>
		/*Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		 *These bits are write-only and can be accessed in Word mode only.
		 *0: No action on the corresponding ODRx bit
		 *1: Set the corresponding ODRx bit */

		GPIOx->BSRR = (uint32_t)PinNumber;
 8000b10:	887a      	ldrh	r2, [r7, #2]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	611a      	str	r2, [r3, #16]





}
 8000b16:	e002      	b.n	8000b1e <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000b18:	887a      	ldrh	r2, [r7, #2]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	615a      	str	r2, [r3, #20]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <MCAL_GPIO_WritePort>:
 * @param [in]	- value: port value
 * @retval 		- None
 * Note			- None
 **================================================================*/

void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t value){
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR = (uint32_t) value;
 8000b34:	887a      	ldrh	r2, [r7, #2]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60da      	str	r2, [r3, #12]

}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <seven_segment_init>:

#include "seven_segment.h"

GPIO_Pin_Config_t pincg;

void seven_segment_init(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

	//configure 7-segment pins to be output

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000b48:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <seven_segment_init+0xcc>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = SEVENSEG_A;
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <seven_segment_init+0xcc>)
 8000b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b54:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000b56:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <seven_segment_init+0xcc>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(SEVENSEG_PORT, &pincg);
 8000b5c:	492c      	ldr	r1, [pc, #176]	; (8000c10 <seven_segment_init+0xcc>)
 8000b5e:	482d      	ldr	r0, [pc, #180]	; (8000c14 <seven_segment_init+0xd0>)
 8000b60:	f7ff ff31 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <seven_segment_init+0xcc>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = SEVENSEG_B;
 8000b6a:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <seven_segment_init+0xcc>)
 8000b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b70:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <seven_segment_init+0xcc>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(SEVENSEG_PORT, &pincg);
 8000b78:	4925      	ldr	r1, [pc, #148]	; (8000c10 <seven_segment_init+0xcc>)
 8000b7a:	4826      	ldr	r0, [pc, #152]	; (8000c14 <seven_segment_init+0xd0>)
 8000b7c:	f7ff ff23 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <seven_segment_init+0xcc>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = SEVENSEG_C;
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <seven_segment_init+0xcc>)
 8000b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b8c:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <seven_segment_init+0xcc>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(SEVENSEG_PORT, &pincg);
 8000b94:	491e      	ldr	r1, [pc, #120]	; (8000c10 <seven_segment_init+0xcc>)
 8000b96:	481f      	ldr	r0, [pc, #124]	; (8000c14 <seven_segment_init+0xd0>)
 8000b98:	f7ff ff15 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <seven_segment_init+0xcc>)
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = SEVENSEG_D;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <seven_segment_init+0xcc>)
 8000ba4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba8:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <seven_segment_init+0xcc>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(SEVENSEG_PORT, &pincg);
 8000bb0:	4917      	ldr	r1, [pc, #92]	; (8000c10 <seven_segment_init+0xcc>)
 8000bb2:	4818      	ldr	r0, [pc, #96]	; (8000c14 <seven_segment_init+0xd0>)
 8000bb4:	f7ff ff07 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <seven_segment_init+0xcc>)
 8000bba:	2204      	movs	r2, #4
 8000bbc:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = SEVENSEG_E;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <seven_segment_init+0xcc>)
 8000bc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc4:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <seven_segment_init+0xcc>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(SEVENSEG_PORT, &pincg);
 8000bcc:	4910      	ldr	r1, [pc, #64]	; (8000c10 <seven_segment_init+0xcc>)
 8000bce:	4811      	ldr	r0, [pc, #68]	; (8000c14 <seven_segment_init+0xd0>)
 8000bd0:	f7ff fef9 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <seven_segment_init+0xcc>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = SEVENSEG_F;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <seven_segment_init+0xcc>)
 8000bdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be0:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <seven_segment_init+0xcc>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(SEVENSEG_PORT, &pincg);
 8000be8:	4909      	ldr	r1, [pc, #36]	; (8000c10 <seven_segment_init+0xcc>)
 8000bea:	480a      	ldr	r0, [pc, #40]	; (8000c14 <seven_segment_init+0xd0>)
 8000bec:	f7ff feeb 	bl	80009c6 <MCAL_GPIO_init>

	pincg.GPIO_PinConfig = GPIO_PIN_MODE_OUTPUT_PP;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <seven_segment_init+0xcc>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	709a      	strb	r2, [r3, #2]
	pincg.GPIO_PinNumber = SEVENSEG_G;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <seven_segment_init+0xcc>)
 8000bf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bfc:	801a      	strh	r2, [r3, #0]
	pincg.GPIO_Output_Speed = GPIO_PIN_SPEED_10MHZ;
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <seven_segment_init+0xcc>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(SEVENSEG_PORT, &pincg);
 8000c04:	4902      	ldr	r1, [pc, #8]	; (8000c10 <seven_segment_init+0xcc>)
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <seven_segment_init+0xd0>)
 8000c08:	f7ff fedd 	bl	80009c6 <MCAL_GPIO_init>

	//initially all leds are off
//	MCAL_GPIO_WritePort(SEVENSEG_PORT, 0xFF<<9);

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000003c 	.word	0x2000003c
 8000c14:	40010c00 	.word	0x40010c00

08000c18 <seven_segment_write>:

void seven_segment_write(uint16_t number)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_WritePort(SEVENSEG_PORT, number<<9);
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	025b      	lsls	r3, r3, #9
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <seven_segment_write+0x20>)
 8000c2c:	f7ff ff7c 	bl	8000b28 <MCAL_GPIO_WritePort>

}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <clock_init>:
#include "LCD.h"
#include "KeyPad.h"
#include "seven_segment.h"

void clock_init()
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	//I/O port A clock enable
	GPIOA_CLOCK_ENABLE();
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <clock_init+0x24>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <clock_init+0x24>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6193      	str	r3, [r2, #24]
	//I/O port B clock enable
	GPIOB_CLOCK_ENABLE();
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <clock_init+0x24>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a03      	ldr	r2, [pc, #12]	; (8000c60 <clock_init+0x24>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	6193      	str	r3, [r2, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000

08000c64 <main>:

int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
	clock_init();
 8000c6a:	f7ff ffe7 	bl	8000c3c <clock_init>
	lcd_init();
 8000c6e:	f7ff fd03 	bl	8000678 <lcd_init>
	seven_segment_init();
 8000c72:	f7ff ff67 	bl	8000b44 <seven_segment_init>
	
	lcd_write_word("WELCOME");
 8000c76:	482b      	ldr	r0, [pc, #172]	; (8000d24 <main+0xc0>)
 8000c78:	f7ff fe06 	bl	8000888 <lcd_write_word>
	Waiting(200);
 8000c7c:	20c8      	movs	r0, #200	; 0xc8
 8000c7e:	f7ff fbcb 	bl	8000418 <Waiting>
	lcd_cmd(LCD_CLEAR);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fdbc 	bl	8000800 <lcd_cmd>
	
	char ch;
	unsigned char lcd_begin[] = {'1','2','3','4','5','6','7','8','9','0'};
 8000c88:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <main+0xc4>)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c90:	c303      	stmia	r3!, {r0, r1}
 8000c92:	801a      	strh	r2, [r3, #0]
	unsigned char seven_seg_begin[] = {ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE,ZERO};
 8000c94:	4a25      	ldr	r2, [pc, #148]	; (8000d2c <main+0xc8>)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c9a:	c303      	stmia	r3!, {r0, r1}
 8000c9c:	801a      	strh	r2, [r3, #0]
	int i;
	for(i=0 ; i<11 ; i++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	e015      	b.n	8000cd0 <main+0x6c>
	{
		seven_segment_write(seven_seg_begin[i]);
 8000ca4:	1d3a      	adds	r2, r7, #4
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	4413      	add	r3, r2
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ffb2 	bl	8000c18 <seven_segment_write>
		lcd_write_char(lcd_begin[i]);
 8000cb4:	f107 0210 	add.w	r2, r7, #16
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	4413      	add	r3, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fdc0 	bl	8000844 <lcd_write_char>
		Waiting(40);
 8000cc4:	2028      	movs	r0, #40	; 0x28
 8000cc6:	f7ff fba7 	bl	8000418 <Waiting>
	for(i=0 ; i<11 ; i++)
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	dde6      	ble.n	8000ca4 <main+0x40>
	}
	
	lcd_cmd(LCD_CLEAR);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f7ff fd92 	bl	8000800 <lcd_cmd>
	lcd_write_word("KEYPAD IS READY");
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <main+0xcc>)
 8000cde:	f7ff fdd3 	bl	8000888 <lcd_write_word>
	Waiting(200);
 8000ce2:	20c8      	movs	r0, #200	; 0xc8
 8000ce4:	f7ff fb98 	bl	8000418 <Waiting>
	lcd_cmd(LCD_CLEAR);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fd89 	bl	8000800 <lcd_cmd>
	
	keypad_init();
 8000cee:	f7ff fa3f 	bl	8000170 <keypad_init>
	while(1)
	{
		ch = keypad_getkey();
 8000cf2:	f7ff fac7 	bl	8000284 <keypad_getkey>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	76fb      	strb	r3, [r7, #27]
		switch(ch)
 8000cfa:	7efb      	ldrb	r3, [r7, #27]
 8000cfc:	2b21      	cmp	r3, #33	; 0x21
 8000cfe:	d002      	beq.n	8000d06 <main+0xa2>
 8000d00:	2b41      	cmp	r3, #65	; 0x41
 8000d02:	d009      	beq.n	8000d18 <main+0xb4>
 8000d04:	e003      	b.n	8000d0e <main+0xaa>
		{
		case 'A':
			break;
		case '!':
			lcd_cmd(LCD_CLEAR);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fd7a 	bl	8000800 <lcd_cmd>
			break;
 8000d0c:	e005      	b.n	8000d1a <main+0xb6>
		default:
			lcd_write_char(ch);
 8000d0e:	7efb      	ldrb	r3, [r7, #27]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fd97 	bl	8000844 <lcd_write_char>
			break;
 8000d16:	e000      	b.n	8000d1a <main+0xb6>
			break;
 8000d18:	bf00      	nop
		}
		
		Waiting(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fb7c 	bl	8000418 <Waiting>
		ch = keypad_getkey();
 8000d20:	e7e7      	b.n	8000cf2 <main+0x8e>
 8000d22:	bf00      	nop
 8000d24:	08000de8 	.word	0x08000de8
 8000d28:	08000e00 	.word	0x08000e00
 8000d2c:	08000e0c 	.word	0x08000e0c
 8000d30:	08000df0 	.word	0x08000df0

08000d34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d36:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	; (8000d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <LoopForever+0xe>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	; (8000d80 <LoopForever+0x16>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d62:	f000 f811 	bl	8000d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d66:	f7ff ff7d 	bl	8000c64 <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
  ldr   r0, =_estack
 8000d6c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000d78:	08000e20 	.word	0x08000e20
  ldr r2, =_sbss
 8000d7c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000d80:	20000040 	.word	0x20000040

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>
	...

08000d88 <__libc_init_array>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	4e0c      	ldr	r6, [pc, #48]	; (8000dc0 <__libc_init_array+0x38>)
 8000d8e:	4c0d      	ldr	r4, [pc, #52]	; (8000dc4 <__libc_init_array+0x3c>)
 8000d90:	1ba4      	subs	r4, r4, r6
 8000d92:	10a4      	asrs	r4, r4, #2
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	d109      	bne.n	8000dac <__libc_init_array+0x24>
 8000d98:	f000 f81a 	bl	8000dd0 <_init>
 8000d9c:	2500      	movs	r5, #0
 8000d9e:	4e0a      	ldr	r6, [pc, #40]	; (8000dc8 <__libc_init_array+0x40>)
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <__libc_init_array+0x44>)
 8000da2:	1ba4      	subs	r4, r4, r6
 8000da4:	10a4      	asrs	r4, r4, #2
 8000da6:	42a5      	cmp	r5, r4
 8000da8:	d105      	bne.n	8000db6 <__libc_init_array+0x2e>
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db0:	4798      	blx	r3
 8000db2:	3501      	adds	r5, #1
 8000db4:	e7ee      	b.n	8000d94 <__libc_init_array+0xc>
 8000db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dba:	4798      	blx	r3
 8000dbc:	3501      	adds	r5, #1
 8000dbe:	e7f2      	b.n	8000da6 <__libc_init_array+0x1e>
 8000dc0:	08000e18 	.word	0x08000e18
 8000dc4:	08000e18 	.word	0x08000e18
 8000dc8:	08000e18 	.word	0x08000e18
 8000dcc:	08000e1c 	.word	0x08000e1c

08000dd0 <_init>:
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd2:	bf00      	nop
 8000dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd6:	bc08      	pop	{r3}
 8000dd8:	469e      	mov	lr, r3
 8000dda:	4770      	bx	lr

08000ddc <_fini>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr
